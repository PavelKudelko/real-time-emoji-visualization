# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

services:

  # You can base this service on a bitnami/kafka Docker Hub image.
  # You need to expose the kafka port to other containers
  # in this  docker-compose.yml
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD the set of instructions as they see fit.
  kafka:
    image: docker.io/bitnami/kafka:latest
    container_name: kafka
    networks:
      - backend
    ports:
      - '9092:9092'
      # KRaft needs both a broker listener (9092) and a controller listener (9093).
      - '9093:9093'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      ALLOW_PLAINTEXT_LISTENER: "yes"

  server_a:
    build: ./backend/server_a
    ports:
      - "3000:3000"
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - backend

  # much of the server_b service entry can be copied from server_a
  # service above. Groups are free to
  # CRUD this set of instructions as they see fit.
  # server_b:
      # build:
      # depends_on:
      # environment:
      # networks:

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend:
    name: backend
  fronted:
    name: frontend


# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:
