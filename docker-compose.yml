# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

services:

  # You can base this service on a bitnami/kafka Docker Hub image.
  # You need to expose the kafka port to other containers
  # in this  docker-compose.yml
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD the set of instructions as they see fit.
  kafka:
    image: docker.io/bitnami/kafka:latest
    container_name: kafka
    networks:
      - backend
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
    - KAFKA_ENABLE_KRAFT=yes
    - KAFKA_CFG_PROCESS_ROLES=broker,controller
    - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
    - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
    - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092, EXTERNAL://kafka:9094
    - KAFKA_BROKER_ID=1
    - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
    - ALLOW_PLAINTEXT_LISTENER=yes
    - KAFKA_CFG_NODE_ID=1
    - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    - KAFKA_KRAFT_CLUSTER_ID=sHLTgq0jTiOoiewR8Gtjcw
    - KAFKAJS_NO_PARTITIONER_WARNING=1
    - KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS=5000
    - KAFKA_CFG_GROUP_MIN_SESSION_TIMEOUT_MS=6000
    - KAFKA_CFG_GROUP_MAX_SESSION_TIMEOUT_MS=30000
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3

  vue_website:
    build:
      context: ./frontend/frontend
      dockerfile: ../../frontend/Dockerfile
    ports:
      - "8080:80"
    environment:
      - VITE_SOCKET_URL=ws://server_a:3000
    networks:
      - frontend

  server_a:
    build: ./backend/server_a
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - backend
      - frontend

  emotegenerator:
    build: ./backend/emotegen
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - backend
    depends_on:
       kafka:
          condition: service_healthy

  # much of the server_b service entry can be copied from server_a
  # service above. Groups are free to
  # CRUD this set of instructions as they see fit.
  server_b:
      build: ./backend/server_b
      ports:
        - "3001:3001"
      depends_on:
          kafka:
            condition: service_healthy
      environment:
        - KAFKA_BROKER=kafka:9092
      networks:
        - backend
        - frontend

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend:
    name: backend
  frontend:
    name: frontend
    driver: bridge


# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:
